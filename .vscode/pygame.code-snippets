{
	// Place your daily_code_23-24 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Game loop": {
		"scope": "python",
		"prefix": "gameloop",
		"isFileTemplate": true,
		"body": [
			"import pygame",
			"from pygame.math import Vector2",
			"from pygame.rect import Rect",
			"",
			"",
			"# config:",
			"FRAMERATE = ${1:60}",
			"SCREEN_SIZE = Vector2(${2:1200}, ${3:800})",
			"",
			"",
			"# pygame init:",
			"pygame.init()",
			"screen = pygame.display.set_mode(SCREEN_SIZE)",
			"pygame.display.set_caption(\"$4\")",
			"",
			"",
			"# definitions:",
			"$0",
			"",
			"",
			"def main():",
			"	# game setup:",
			"	clock = pygame.time.Clock()",
			"",
			"	# main loop:",
			"	running = True",
			"	while running:",
			"		delta = clock.tick(FRAMERATE) / 1000",
			"",
			"		# input:",
			"		for event in pygame.event.get():",
			"			if event.type == pygame.QUIT:",
			"				running = False",
			"",
			"		# draw:",
			"		screen.fill(\"#000000\")",
			"",
			"		pygame.display.flip()",
			"",
			"if __name__ == \"__main__\":",
			"	main()"
		]
	}
}